{
  "project": "Medica Scientifica Optimizer",
  "features": [],
  "agents": {},
  "metadata": {
    "version": "1.0.0",
    "created": "2025-10-01T21:47:47.934Z",
    "updated": "2025-10-08T16:23:57.844Z",
    "total_features": 0,
    "approval_history": [],
    "initialization_stats": {
      "total_initializations": 0,
      "total_reinitializations": 5,
      "current_day": "2025-10-05",
      "time_buckets": {
        "19:00-23:59": {
          "init": 0,
          "reinit": 0
        },
        "00:00-04:59": {
          "init": 0,
          "reinit": 0
        },
        "05:00-09:59": {
          "init": 0,
          "reinit": 0
        },
        "10:00-14:59": {
          "init": 0,
          "reinit": 1
        },
        "15:00-19:59": {
          "init": 0,
          "reinit": 0
        }
      },
      "daily_history": [
        {
          "date": "2025-10-02",
          "total_init": 0,
          "total_reinit": 1,
          "buckets": {
            "16:00-20:59": {
              "init": 0,
              "reinit": 0
            },
            "21:00-01:59": {
              "init": 0,
              "reinit": 1
            },
            "02:00-06:59": {
              "init": 0,
              "reinit": 0
            },
            "07:00-11:59": {
              "init": 0,
              "reinit": 0
            },
            "12:00-16:59": {
              "init": 0,
              "reinit": 0
            }
          }
        },
        {
          "date": "2025-10-03",
          "total_init": 0,
          "total_reinit": 1,
          "buckets": {
            "17:00-21:59": {
              "init": 0,
              "reinit": 1
            },
            "22:00-02:59": {
              "init": 0,
              "reinit": 0
            },
            "03:00-07:59": {
              "init": 0,
              "reinit": 0
            },
            "08:00-12:59": {
              "init": 0,
              "reinit": 0
            },
            "13:00-17:59": {
              "init": 0,
              "reinit": 0
            }
          }
        },
        {
          "date": "2025-10-04",
          "total_init": 0,
          "total_reinit": 1,
          "buckets": {
            "17:00-21:59": {
              "init": 0,
              "reinit": 1
            },
            "22:00-02:59": {
              "init": 0,
              "reinit": 0
            },
            "03:00-07:59": {
              "init": 0,
              "reinit": 0
            },
            "08:00-12:59": {
              "init": 0,
              "reinit": 0
            },
            "13:00-17:59": {
              "init": 0,
              "reinit": 0
            }
          }
        }
      ],
      "last_reset": "2025-10-05T15:43:02.211Z",
      "last_updated": "2025-10-05T15:43:02.211Z"
    }
  },
  "workflow_config": {
    "require_approval": true,
    "auto_reject_timeout_hours": 168,
    "allowed_statuses": [
      "suggested",
      "approved",
      "rejected",
      "implemented"
    ],
    "required_fields": [
      "title",
      "description",
      "business_value",
      "category"
    ]
  },
  "tasks": [
    {
      "id": "task_1759802670133_b09892be448e",
      "feature_id": null,
      "title": "Add color-coded arrows to process map based on flow conditions",
      "description": "Implement feature to color arrows differently based on balance (green), bottleneck/shortage (red), or surplus (yellow/orange). Need to analyze flow rates, capacity, and demand to determine arrow colors dynamically.",
      "type": "feature",
      "priority": "normal",
      "status": "completed",
      "dependencies": [],
      "estimated_effort": 5,
      "required_capabilities": [
        "general"
      ],
      "created_at": "2025-10-07T02:04:30.133Z",
      "updated_at": "2025-10-07T02:51:44.240Z",
      "created_by": "manual_creation",
      "verificationGate": {
        "status": "pending",
        "requirements": [],
        "evidence": null,
        "verifiedAt": null,
        "verifiedBy": null
      },
      "metadata": {
        "auto_generated": false
      },
      "progress_percentage": 100,
      "completed_at": "2025-10-07T02:07:02.989Z"
    },
    {
      "id": "task_1759804951814_4afb59d03be8",
      "feature_id": null,
      "title": "Add per-queue WIP history tracking to simulation engine",
      "description": "Enhance simulation engine to track per-queue WIP counts in history for timeline visualization. Currently only total WIP is tracked. Need to add:\n\nCustom Line Queues:\n- dailyCustomQueue1 (WAITING orders)\n- dailyCustomQueue2 (MCE in-process)\n- dailyCustomQueue3 (WMA_PASS2/PUC in-process)\n\nStandard Line Queues:\n- dailyStdQueue1 (preStation1 batches)\n- dailyStdQueue2 (station1 batches)\n- dailyStdQueue3 (station2 batches)\n- dailyStdQueue4 (station3 batches)\n- dailyStdQueue5 (finishedGoods.standard)\n\nFiles to modify:\n1. src/simulation/types.ts - Add new DailyMetric[] arrays to SimulationHistory interface\n2. src/simulation/simulationEngine.ts - Record per-queue counts each day in recordDailyHistory()\n3. src/client/utils/historicalDataLoader.ts - Initialize new history arrays\n4. src/utils/csvExporter.ts - Add new columns to CSV export\n\nAcceptance Criteria:\n- All 8 queue histories tracked daily\n- Timeline visualization uses real data instead of estimates\n- Types updated, builds pass, no regressions",
      "type": "feature",
      "priority": "high",
      "status": "completed",
      "dependencies": [],
      "estimated_effort": 5,
      "required_capabilities": [
        "general"
      ],
      "created_at": "2025-10-07T02:42:31.814Z",
      "updated_at": "2025-10-07T02:51:43.869Z",
      "created_by": "manual_creation",
      "verificationGate": {
        "status": "pending",
        "requirements": [],
        "evidence": null,
        "verifiedAt": null,
        "verifiedBy": null
      },
      "metadata": {
        "auto_generated": false
      },
      "progress_percentage": 100,
      "completed_at": "2025-10-07T02:51:43.869Z"
    },
    {
      "id": "task_1759856845341_da2d09ffa142",
      "feature_id": null,
      "title": "Add info button and user controls for automated debt payment system",
      "description": "Enhance the automated debt payment system panel with: 1) Info button explaining what the system does, 2) User-configurable inputs for payment parameters, 3) Clear documentation of how it works",
      "type": "feature",
      "priority": "normal",
      "status": "completed",
      "dependencies": [],
      "estimated_effort": 5,
      "required_capabilities": [
        "general"
      ],
      "created_at": "2025-10-07T17:07:25.341Z",
      "updated_at": "2025-10-07T17:11:07.820Z",
      "created_by": "manual_creation",
      "verificationGate": {
        "status": "pending",
        "requirements": [],
        "evidence": null,
        "verifiedAt": null,
        "verifiedBy": null
      },
      "metadata": {
        "auto_generated": false
      },
      "progress_percentage": 100,
      "completed_at": "2025-10-07T17:11:07.820Z"
    },
    {
      "id": "task_1759889058268_b0b7acea41ed",
      "feature_id": null,
      "title": "Fix 12 ESLint errors in optimization modules",
      "description": "Fix linting violations:\n- bayesianOptimizer.ts: Replace 10 instances of any type with proper types\n- policyEngine.ts: Fix lexical declaration in case block\n- sensitivityAnalysis.ts: Replace any type with proper type\n\nAll errors must be resolved to pass pre-commit hooks.",
      "type": "error",
      "priority": "high",
      "status": "completed",
      "dependencies": [],
      "estimated_effort": 5,
      "required_capabilities": [
        "general"
      ],
      "created_at": "2025-10-08T02:04:18.268Z",
      "updated_at": "2025-10-08T16:23:57.844Z",
      "created_by": "manual_creation",
      "verificationGate": {
        "status": "pending",
        "requirements": [],
        "evidence": null,
        "verifiedAt": null,
        "verifiedBy": null
      },
      "metadata": {
        "auto_generated": false
      },
      "progress_percentage": 100,
      "completed_at": "2025-10-08T16:23:57.844Z"
    }
  ],
  "completed_tasks": []
}